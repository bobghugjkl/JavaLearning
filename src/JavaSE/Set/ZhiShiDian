set:不允许存储重复元素，没有索引，与collection中的方法一致
    HashSet:无序集合，查询快，不同步，实现了set接口,不重复
        哈希值：对象地址值，但是是模拟地址，不是实际地址，object中有个hashcode()方法可以获取哈希值
        方法源码中的native指的是调用本地系统的方法

        public class Person extends Object{
            //继承object可以使用他的hashcode方法
            //当然也可以重写

            //@Override
        //    public int hashCode() {
        //        return 1;
        //    }
        }
        public static void main(String[] args) {
                Set<Integer> set = new HashSet<>();
                set.add(1);
                set.add(2);
                set.add(3);
                set.add(1);
                //不可以使用for因为没有索引，要用迭代器
                Iterator<Integer> it = set.iterator();
                while(it.hasNext()){
                    Integer n = it.next();
                    System.out.println(n);
                }
                //增强for
                for(Integer i : set){
                    System.out.println(i);
                }
                //hashcode
                Person p1 = new Person();
                int h1 = p1.hashCode();
                System.out.println(h1);

                //String哈希值也是重写了
                String s1 = new String("abc");
                String s2 = new String("abc");
                System.out.println(s1.hashCode());
                System.out.println(s2.hashCode());
                //重地和通话哈希值一样，是巧合
                System.out.println("重地".hashCode());
                System.out.println("通话".hashCode());
            }

哈希表结构
jdk1.8之前：哈希表=数组+链表
之后：哈希表=数组+链表+红黑树
哈希表：查询快
初始容量：16个，数组将元素通过哈希值分组（相同的一组）
             链表、红黑树将哈希值相同的元素连接到一起（冲突时）
             存储数据时先计算元素的哈希值


new：堆中开辟空间
add方法时会调用hashcode和equals方法
先找哈希值，然后在集合内（分时间先后，刚开始为空）找有没有相同之的，如果没有就将它挂在那个值下面（邻接表）
如果有一样的就用equals进行比较，若还一样就不会存储



HashSet集合存取自定义元素
需要先重写hashcode和equals方法
package Set;

import java.util.Objects;

public class Person extends Object{
    //要求：同名同年龄的人视为同一个
    private String name;
    private int age;

    public Person() {
    }

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }
    //重写tostring
    @Override
    public String toString() {
        return "Person{" +
                "name='" + name + '\'' +
                ", age=" + age +
                '}';
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Person person = (Person) o;
        return age == person.age && Objects.equals(name, person.name);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, age);
    }
}




LinkedHashset:可预知迭代顺序的哈希表和链表列表实现，维护一个双重链表
    底层：哈希表+链表——多了一条链表保证元素有序
    有序，不允许重复