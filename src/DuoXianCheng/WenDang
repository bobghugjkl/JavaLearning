多任务：一个时间干多个事
多线程：多条道路解决阻塞问题——多cpu
进程：执行程序的一次执行过程（系统资源分配的最小单位）
线程：进程可以包含若干个线程（cpu调度和执行的最小单位）


三种创建方式：Thread class：继承Thread类（重点）
            Runnable：实现Runable接口（重点）
            Callable：实现Callable接口（了解）


Thread class：继承Thread类（重点）：
    有优先权，可以决定先执行哪个后执行哪个，每个线程可能或不可能标位守护程序（main）
    线程是程序中执行的线程。 Java虚拟机允许应用程序同时执行多个执行线程。
    每个线程都有优先权。 具有较高优先级的线程优先于优先级较低的线程执行。 每个线程可能也可能不会被标记为守护程序。
    当在某个线程中运行的代码创建一个新的Thread对象时，新线程的优先级最初设置为等于创建线程的优先级，并且当且仅当创建线程是守护进程时才是守护线程。

    当Java虚拟机启动时，通常有一个非守护进程线程（通常调用某些指定类的名为main的方法）。 Java虚拟机将继续执行线程，直到发生以下任一情况：

    已经调用了Runtime类的exit方法，并且安全管理器已经允许进行退出操作。
    所有不是守护进程线程的线程都已经死亡，无论是从调用返回到run方法还是抛出超出run方法的run 。
    创建一个新的执行线程有两种方法。 一个是将一个类声明为Thread的子类。 这个子类应该重写run类的方法Thread 。
    然后可以分配并启动子类的实例。 例如，计算大于规定值的素数的线程可以写成如下：

boot就是反射
反射：更方便的编译，动态改变代码,即玩家后续加上的代码

多线程两种方式Thread,Runable

锁：多线程读写冲突问题

wait休息一会
notify唤醒