246~252
泛型：集合中存储的数据类型，即未知的数据类型，当我们不知道用什么数据类型的时候使用，当然也可以接收数据类型
E e :元素
T t：类型
比如集合arraylist就会使用到泛型
创建集合对象的时候就会确定泛型的数据类型，尖括号内就会传递对象，但是不安全，会引发异常，最好接收的时候用object类型接收以免出错
好处：避免了转换的麻烦
    把运行期异常提升到了编译期（写代码的时候就会报错）



 public static void main(String[] args) {
        show01();
    }
    private static void show01(){
        ArrayList list = new ArrayList();
        list.add("abc");
        list.add(1);
        JavaSE.Iterator it =list.iterator();
        while(it.hasNext()){
            //取出元素也是object类型
            Object obj =it.next();
            System.out.println(obj);
            //无法使用特有的string类特有的方法，length获取字符串长度，不能使用     多态 Object obj = “abc”；
            //需要向下转型
            String s =(String)obj;
            System.out.println(s.length());//会抛出异常，类型无法转换，不可以将Integer类型转为String
            //这就是泛型的坏处

        }
    }

泛型的定义与使用（定义含有泛型的类）
/*
定义一个含有泛型的类模拟ArrayList集合
泛型是一个未知的数据类型，当我们不确定什么什么数据类型的时候可以使用泛型
可以接受任意数据类型，可以使用Integer String Student
创建对象的时候确定泛型的数据类型
 */
public class Generic <E>{
    private E name;

    public E getName() {
        return name;
    }

    public void setName(E name) {
        this.name = name;
    }
}
public static void main(String[] args) {
        Generic generic = new Generic();
        generic.setName("lll");
        //不写泛型默认为object类型
        Object obj = generic.getName();
        //创建Genneric对象，泛型使用Integer类型
        Generic<Integer>gc2 = new Generic<>();
        gc2.setName(1);
        Integer name = gc2.getName();
        System.out.println(name);
        //当然也可以用其他包装类型,也可以用其对应的数据类型接收（自动拆箱）

}




定义和使用含有泛型的方法,泛型定义在方法的修饰符和返回值类型之间
格式：
    修饰符<泛型> 返回值类型 方法名称（参数列表（使用泛型））{
        方法体
    }

    含有泛型的方法，在调用方法的时候确定泛型的数据类型
    传递什么参数，泛型就是什么类型
public class Generic {
    //定义一个含有泛型的方法
    public <M>void method01(M m){
        System.out.println(m);
    }
    public static <S> void method02(S s){
        System.out.println(s);
    }

}
public class Text {
    public static void main(String[] args) {
      //测试含有泛型的方法,先创建一个对象
        Generic gm = new Generic();
        /*
        调用含有泛型的方法
        传递什么类型，泛型就是什么类型
         */
        gm.method01(10);
        gm.method01("121");
        gm.method01(true);
        //含有泛型的静态方法,两种：1.通过对象来调用（不建议），2.通过类名.方法名（参数）可以直接使用
        gm.method02("静态方法不建议创建对象使用");
        //通过类名.方法名（参数）可以直接使用
        Generic.method02("静态方法");
        Generic.method02(2);

    }

}





定义和使用含有泛型的接口
package JavaSE.FanXing;
/*
定义含有泛型的接口
 */
public interface GenericInterface<I> {
    //定义抽象方法，没有返回值，在方法上用一下
    public abstract void method(I i);
}

/*
含有泛型的接口的使用方式1：定义接口的实现类让它实现接口，并指定接口的泛型
public interface JavaSE.Iterator<E>{
    E.next();
}
在这里类比Scanner类实现了Iterator接口，并指定接口的泛型为String，所以重写的next方法泛型默认就是String
public final class Scanner implements JavaSE.Iterator<String>{
    public String next(){}
}
 */
public class GenericInterface01 implements  GenericInterface<String>{
    //重写方法别忘了
    @Override
    public void method(String s) {
        System.out.println(s);
    }
}
public class Generichterface02<I> implements GenericInterface<I>{
    @Override
    public void method(I i) {
        System.out.println(i);
    }
    /*
    第二种实现方式，接口使用什么泛型，实现类就使用什么泛型，类跟着接口走
    相当于定义了一个含有泛型的类，比如ArrayList集合
    public interface JavaSE.List<E>{
        boolean add(E e);
        E get(int index);
    }

     */

}
 public static void main(String[] args) {
      //创建GenericInterface01对象，测试含有泛型的主接口(第一种)
        GenericInterface01 gi1 = new GenericInterface01();
        gi1.method("字符串");
        //测试使用第二种
        Generichterface02<Integer> gi2 = new Generichterface02<>();
        gi2.method(10);

        Generichterface02<Double>gi3 = new Generichterface02<>();
        gi3.method(23.4);
    }


 泛型通配符：<?>
 不知道使用什么类型来接受的时候，此时可以使用?,?表示未知通配符
 /*
     泛型的通配符：
     ？：代表任意的数据类型
     使用方式：
     不能创建对象使用，只能作为方法参数使用
     高级使用：上限和下限
     上限：类型名称<? extends 类 >对象名称
         只能接收该类型及其子类
     下限：类型名称<? super 类 > 对象名称
         只能接收该类型及其父类
     类与类之间的继承关系：
     Integer =>number=>object
     String =>object(从右向左逐渐递减)
      */
     public static void main(String[] args) {
         ArrayList<Integer>list01 = new ArrayList<>();
         list01.add(1);
         list01.add(2);
         ArrayList<String>list02 = new ArrayList<>();
         list02.add("a");
         list02.add("b");
         printArray(list01);
     }
     /*
     定义一个方法，可以遍历所有类型的ArrayList集合，但我们不知道他是什么数据类型，可以使用泛型的通配号来接收数据类型,泛型没有继承概念，所以没有object类
      */
     public static void printArray(ArrayList<?>list){
         //迭代器
         JavaSE.Iterator<?> iterator = list.iterator();
         while(iterator.hasNext()){
             //it.next()取出的是object类型，因为可以接受任意的数据类型
             Object obj =iterator.next();
             System.out.println(obj);

         }

     }
